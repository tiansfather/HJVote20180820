@using Master.Web.Components
@{
    ViewData["Title"] = "Index";
}

<div class="layui-fluid" id="LAY-app-message">
    <div class="layui-card">
        <div class="layui-card-header bold"><i class="layui-icon layui-icon-next"></i> @L("赛事管理")</div>
        <div class="layui-card-body">
            <form class="layui-form layui-form-pane" onsubmit="return doSearch();">
                <div class="layui-form-item">
                    <div class="layui-inline">
                        <label class="layui-form-label">@L("赛事名称")</label>
                        <div class="layui-input-inline">
                            <input type="text" id="name" name="name" autocomplete="off" class="layui-input">
                        </div>
                    </div>
                    <div class="layui-inline">
                        <label class="layui-form-label">@L("届")</label>
                        <div class="layui-input-inline">
                            <input type="text" id="identifier" name="identifier" autocomplete="off" class="layui-input">
                        </div>
                        <button class="layui-btn layui-btn-primary" type="button" onclick="doSearch()">@L("查询")</button>
                    </div>
                    
                </div>

                <div class="layui-form-item">
                    <button class="layui-btn  " fornonerow="1" buttonname="@L("赛事名称管理")" type="button" params="{&quot;area&quot;: [&quot;80%&quot;, &quot;80%&quot;],&quot;btn&quot;:null}" lay-event="Add" confirmmsg="" buttonactiontype="Form" buttonactionurl="/Matches/MatchNames" onclick="func.callModuleButtonEvent()">@L("赛事名称管理")</button>

                    <button class="layui-btn  " fornonerow="1" buttonname="@L("创办新一届")" type="button" params="{&quot;area&quot;: [&quot;600px&quot;, &quot;550px&quot;],&quot;btn&quot;:[&quot;暂存&quot;,&quot;关闭&quot;]}" lay-event="Add" confirmmsg="" buttonactiontype="Form" buttonactionurl="/Matches/Add" onclick="func.callModuleButtonEvent()">@L("创办新一届")</button>
                </div>
            </form>

            

            <table autoevent="1" id="MatchInstance" lay-filter="MatchInstance" class="layui-table " lay-data="{cellMinWidth:'80',height:'full-220', url:'/api/services/app/MatchInstance/GetPageResult', page:true,limit:30, id:'MatchInstance', skin: 'row', even: true,done:config.onTableDone,initSort:{field:'Id',type:'desc'}}">
                <thead>
                    <tr>
                        <th lay-data="{align:'center',field:'matchName'}">@L("赛事名称")</th>
                        <th lay-data="{align:'center',field:'identifier'}">@L("届")</th>
                        <th lay-data="{align:'center',field:'year'}">@L("年份")</th>
                        <th lay-data="{align:'center',field:'matchInstanceStatus',templet:'#matchInstanceStatusTpl'}">@L("状态")</th>
                        <th lay-data="{align:'center',field:'remarks'}">@L("备注")</th>
                        <th lay-data="{align:'center',field:'matchInstanceDisplayMode',templet: '#switchTpl'}">@L("项目展示")</th>
                        <th lay-data="{align:'center',field:'',templet:'#downloadTpl'}">赛事数据</th>
                        <th lay-data="{align:'center', toolbar: '#toolbar'}">@L("操作")</th>
                    </tr>
                </thead>
            </table>
        </div>

    </div>
</div>
<script type="text/html" id="downloadTpl">
    {{#if(d.dataProjectPath){}}
    <a href="{{d.dataProjectPath}}" target="_hidden" style="text-decoration:underline;color:blue">项目数据</a>
    {{#}}}
    {{#if(d.dataReviewPath){}}
    <a href="{{d.dataReviewPath}}" target="_hidden" style="text-decoration:underline;color:blue">评审数据</a>
    {{#}}}
</script>
<script type="text/html" id="switchTpl">
  <!-- 这里的 checked 的状态只是演示 -->
  <input type="checkbox" name="matchInstanceDisplayMode" value="{{d.id}}" lay-skin="switch" lay-text="项目明细|仅项目名称" lay-filter="matchInstanceDisplayMode" {{ d.matchInstanceDisplayMode == '0' ? 'checked' : '' }}>
</script>
<script type="text/html" id="toolbar">
    <a dataid="{{d.id}}" buttonname="@L("编辑")" modulekey="MatchInstance" class="layui-btn layui-btn-xs " params="{&quot;area&quot;: [&quot;600px&quot;, &quot;550px&quot;],&quot;btn&quot;:null}" lay-event="Edit" confirmmsg="" buttonactiontype="Form" buttonactionurl="/Matches/Edit" onclick="func.callModuleButtonEvent()">@L("编辑")</a>
    <a dataid="{{d.id}}"  class="layui-btn layui-btn-xs layui-btn-normal"  onclick="doExport({{d.id}})">导出赛事</a>
    @*<a dataid="{{d.id}}" class="layui-btn layui-btn-danger layui-btn-xs" buttonname="@L("删除")" modulekey="" params="" lay-event="Delete" confirmmsg="@(L("确认删除"))？" buttonactiontype="Ajax" buttonactionurl="abp.services.app.role.deleteEntity" onclick="func.callModuleButtonEvent()">@L("删除")</a>*@
</script>
<iframe id="_hidden" name="_hidden" style="display:none"></iframe>
@section scripts{
    <script>
        config.ready = function () {
            var element = layui.element,
                table = layui.table,
                form=layui.form;
            table.on('sort(MatchInstance)', function (obj) { //注：tool是工具条事件名，test是table原始容器的属性 lay-filter="对应的值"
                //console.log(obj.field); //当前排序的字段名
                //console.log(obj.type); //当前排序类型：desc（降序）、asc（升序）、null（空对象，默认排序）
                //console.log(this); //当前排序的 th 对象

                //尽管我们的 table 自带排序功能，但并没有请求服务端。
                //有些时候，你可能需要根据当前排序的字段，重新向服务端发送请求，从而实现服务端排序，如：
                table.reload('MatchInstance', {
                    initSort: obj //记录初始排序，如果不设的话，将无法标记表头的排序状态。 layui 2.1.1 新增参数
                    , where: { //请求参数（注意：这里面的参数可任意定义，并非下面固定的格式）
                        orderfield: obj.field,
                        ordertype: obj.type
                    }
                });
            });
            //监听性别操作
              form.on('switch(matchInstanceDisplayMode)', async function(obj){
                  await abp.services.app.matchInstance.setMatchInstanceDisplayMode(this.value,obj.elem.checked?0:1);
                  layer.msg('设置成功');
              });
            config.refresh();


        };
        config.onTableDone = function () {

        };
        config.refresh = function () {

        };
        function doSearch() {
            var where = {where:'1=1'};
            var name = $("#name").val();
            var identifier = $("#identifier").val();
            if (name) {
                where.where += " and Match.Name.Contains(\"" + name + "\") ";
            }
            if (identifier) {
                where.where += " and Identifier.Contains(\"" + identifier + "\")";
            }
            layui.table.reload('MatchInstance', {
                where: where

            })

            return false;
        }

        var matchInstanceId;
        var projectIds = [];//待导出项目
        var exportedProjectIds = [];//已导出项目
        var reviewIds = [];//待导出评审
        var exportedReviewIds = [];//已导出评审
        function doExport(id) {
            matchInstanceId = id;
            layer.confirm('确认导出赛事所有数据?原有导出数据将被清除！', async function (index) {
                layer.close(index);
                loadmsg('正在初始化导出');
                projectIds = await abp.services.app.matchInstance.initProjectExport(matchInstanceId);
                if (projectIds.length > 0) {
                    exportProject(projectIds[0]);
                } else {
                    abp.message.error("没有项目可以导出");
                }
                
            });       
            //abp.message.confirm("确认导出赛事所有数据?", function () {
            //    loadmsg('正在初始化导出');
            //    //var projectIds = await abp.services.app.matchInstance.initExport(matchInstanceId);
            //})
        }
        function exportProject(projectId) {
            loadmsg('正在导出项目,' + (exportedProjectIds.length+1) + '/' + projectIds.length);
            _hidden.location.href = '/ProjectReport/View?projectId=' + projectId + "&mode=export";
        }
        async function exportReview(reviewId) {
            loadmsg('正在导出评审,' + (exportedReviewIds.length + 1) + '/' + reviewIds.length);
            await abp.services.app.review.exportReview(reviewId);
            exportedReviewIds.push(reviewId);
        }
        async function onExportProject(projectId) {
            exportedProjectIds.push(projectId);
            if (exportedProjectIds.length == projectIds.length) {
                //全部项目已导出，则进行下一步
                loadmsg('正在导出评审数据');
                reviewIds = await abp.services.app.matchInstance.initReviewExport(matchInstanceId);
                for (var i = 0; i < reviewIds.length; i++) {
                    await exportReview(reviewIds[i]);
                }
                //文件压缩
                loadmsg('正在压缩数据');
                await abp.services.app.matchInstance.compress(matchInstanceId);
                loadmsg('导出成功', 3);
                refreshExport();
                
            } else {
                exportProject(projectIds[exportedProjectIds.length]);
            }
        }
        function loadmsg(msg, time) {
            time = time || 0;
            layer.msg(msg, {
                icon: 16
                , shade: 0.01, time: time
            })
        }
        function refreshExport() {
            layui.table.reload('MatchInstance');
            projectIds = [];//待导出项目
            exportedProjectIds = [];//已导出项目
            reviewIds = [];//待导出评审
            exportedReviewIds = [];//已导出评审
        }
    </script>
}